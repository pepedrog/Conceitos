#lang plai-typed

; Linguagem central, com nosso símbolos primitivos 
(define-type ArithC
  [numC (n : number)]
  [plusC (l : ArithC)(r : ArithC)]
  [multC (l : ArithC)(r : ArithC)])

; Interpretador da nossa linguagem central
; Equivalente a transformar o código em código de máquina
(define (interp [a : ArithC]) : number
  (type-case ArithC a
    [numC (n) n]
    [plusC (l r) (+ (interp l) (interp r))]
    [multC (l r) (* (interp l) (interp r))]
  ))

; Parser que transforma a linguagem formal da linguagem (s-expression)
; Em ArithC, que é nossa linguagem abstrata
(define (parse [s : s-expression]) : ArithC
  ;Vamos verificar o tipo do s
  (cond
    [(s-exp-number? s) (numC (s-exp->number s))] ; se número, só devolve o número
    [(s-exp-list? s)                             ; se lista, temos que avaliar a expressão
     (let ([sl (s-exp->list s)])                  ; transforma a s-expression na lista de s-expressions
       (case (s-exp->symbol (first sl))          ; avalia cada caso
         [(+) (plusC (parse (second sl)) (parse (third sl)))]
         [(*) (multC (parse (second sl)) (parse (third sl)))]
         [else (error 'parse "invalid list input")]))]
   [else (error 'parse "invalid input")]))

; exemplos
; (parse '(* (+ 5 7) (+ 2 2)))
; (interp (parse '(* (+ 5 7) (+ 2 2))))
